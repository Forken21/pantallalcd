import os
import time
import requests
import socket

ip = socket.gethostbyname(socket.gethostname())
menu = "Introduzca opcion: "
tiempo = requests.get('https://wttr.in/San_Fernando,Spain?format="%l:+%c+%t+%m+Viento+%w"\n')

def principal():
    os.system('clear')
    print("")
    print("")
    print("El tiempo que hace ahora..."+tiempo.text)
    print("")
    print("--------------------------------")
    print("         MENU PRINCIPAL         ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Menu LCD")
    print("\t2 - Menu Disco Duro")
    print("\t3 - Menu Plex")
    print("\t4 - Menu Tautulli")
    print("\t5 - Menu Transmission")
    print("\t6 - Actualizar Sistema")
    print("\t7 - Reiniciar")
    print("\t0 - Salir")
    print("")
   
    set_menu = int(input(menu))
    if set_menu == 1:
        menulcd()
    elif set_menu ==2:
        menudiscoduro()
    elif set_menu == 3:
        menuplex()
    elif set_menu == 4:
        menutautulli()
    elif set_menu == 5:
        menutransmission()
    elif set_menu == 6:
        actualizacion()
    elif set_menu == 7:
        reinicio()
    elif set_menu == 0:
        return
    else:
        print("no has elegido ninguna opcion")
        principal()
   
def menulcd(): #Menu LCD
    os.system('clear')
    print
    print("")
    print("--------------------------------")
    print("         MENU INSTALACION       ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Actualizar sistema")
    print("\t2 - Instalacion AUTOMATICA LCD (Se Reiniciará)")
    print("\t3 - Instalador LCD (Sin reinicio)")
    print("\t4 - Instalador Driver LCD (Sin reinicio)")
    print("\t5 - Cambiar de LCD a HDMI")
    print("\t6 - Cambiar de HDMI a LCD")
    print("\t7 - Instalar TouchUI (Automatico)")
    print("\t8 - Reinstalar TouchUI <<<EN CONSTRUCCION>>>")
    print("\t9 - Instalar OctoDash")
    print("\t10 - Actualizar OctoDash")
    print("\t11 - Reiniciar")
    print("\t12 - Atras")
    print("\t0 - Salir")
    print("")

    set_menu = int(input(menu))
    
    if set_menu == 1: #Actualizar Sistema
        print("")
        print("ACTUALIAZACION DEL SISTEMA")
        os.system('sudo apt-get update -y')
        time.sleep(3)
        os.system('sudo apt-get upgrade -y')
        time.sleep(3)
        print("")
        print("...actualizacion completada...")
        print("Pulsa ENTER para continuar...")
        input()
        time.sleep(5)
        menulcd()

    elif set_menu ==2: #Instalacion AUTOMATICA LCD (Se Reiniciara)
        print("")   
        print("INSTALACION AUTOMATICA LCD")
        print(" ---> Se Reiniciará <---  ")
        print("" "")
        os.system('cd ~')
        time.sleep(3)
        print("Bajando archivos...")
        os.system('wget http://kedei.net/IMG/v6_1/LCD_show_v6_1_3.tar.gz')
        time.sleep(3)
        print("...Descomprimiendo archivos...")
        os.system('tar xzvf LCD_show_v6_1_3.tar.gz')
        time.sleep(3)
        print("...abriendo carpeta...")
        os.system('cd LCD_show_v6_1_3')
        time.sleep(3)
        print("...ejecutando LCD_show_v6_1_3")
        os.system('./LCD35_v')
        time.sleep(5)
        print("Empezamos con el Driver")
        print("...bajando driver...")
        os.system('cd ~')
        os.system('wget https://sourceforge.net/projects/wavetech/files/lcd.tar.gz')
        time.sleep(3)
        print("...descomprimiendo...")
        os.system('tar -xf lcd.tar.gz')
        time.sleep(3)
        print("")
        print("+--------------------------------------+")
        print("|          INSTALANDO LOS DRIVER       |")
        print("+--------------------------------------+")
        print("")
        time.sleep(5)
        print("...actualizando Kernel...")
        os.system('sudo cp ./lcd_files/kernel.img /boot/kernel.img')
        os.system('sudo cp ./lcd_files/kernel7.img /boot/')
        os.system('sudo cp ./lcd_files/*.dtb /boot/')
        os.system('sudo cp ./lcd_files/overlays/*.dtb* /boot/overlays/')
        time.sleep(3)
        print("...subiendo modulos kernel...")
        os.system('sudo cp -rf ./lcd_files/lib/* /lib/')
        os.system('sudo rm /boot/bcm2710-rpi-3-b-plus.dtb')
        time.sleep(3)
        print("...desabilitando actualizacion del kernel...")
        os.system('sudo apt-mark hold raspberrypi-kernel')
        print("--> INSTALACION COMPLETADA <--")
        time.sleep(3)
        print("...REINICIANDO...")
        time.sleep(5)
        os.system('sudo reboot')
        menulcd()
    
    elif set_menu == 3: #Instalador LCD (Sin Reinicio)
        print("")
        print("   INSTALACION LCD    ")
        print("---> Sin reinicio <---")
        print("")
        time.sleep(3)
        print("Bajando archivos...")
        os.system('cd~')
        os.system('wget http://kedei.net/IMG/v6_1/LCD_show_v6_1_3.tar.gz')
        time.sleep(3)
        print("...Descomprimiendo archivos...")
        os.system('tar xzvf LCD_show_v6_1_3.tar.gz')
        time.sleep(3)
        print("...abriendo carpeta...")
        os.system('cd LCD_show_v6_1_3')
        time.sleep(3)
        print("...ejecutando LCD_show_v6_1_3")
        os.system('LCD_show_v6_1_3/./LCD35_v')
        time.sleep(3)
        print("--> INSTALACION COMPLETADA <---")
        print("Se debe reiniciar para que los cambios tengan efectos.")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 4: #Instalador Driver LCD (Sin reinicio)
        print("")
        print("   INSTALACION DRIVE    ")
        print("---> Sin reinicio <---  ")
        print("")
        time.sleep(3)
        print("...actualizando Kernel...")
        os.system('sudo cp ./lcd_files/kernel.img /boot/kernel.img')
        os.system('sudo cp ./lcd_files/kernel7.img /boot/')
        os.system('sudo cp ./lcd_files/*.dtb /boot/')
        os.system('sudo cp ./lcd_files/overlays/*.dtb* /boot/overlays/')
        time.sleep(3)
        print("...subiendo modulos kernel...")
        os.system('sudo cp -rf ./lcd_files/lib/* /lib/')
        os.system('sudo rm /boot/bcm2710-rpi-3-b-plus.dtb')
        time.sleep(3)
        print("...desabilitando actualizacion del kernel...")
        os.system('sudo apt-mark hold raspberrypi-kernel')
        time.sleep(3)
        print("--> INSTALACION COMPLETADA <--")
        print("PARA QUE LOS CAMBIOS TENGAN EFECTOS, SE DEBE REINICIAR")
        input()
        menulcd()

    elif set_menu == 5: #Cambiar de LCD a HDMI
        print("")
        print(" DE LCD A HDMI")
        print("Se debe reiniciar para que los cambios surtan efectos")
        print("")
        time.sleep(3)
        print("...abriendo carpeta...")
        os.system('cd ~')
        os.system('cd LCD_show_v6_1_3')
        time.sleep(3)
        print("...ejecutando LCD_show_v6_1_3")
        os.system('./LCD_dhmi')
        time.sleep(3)
        print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 6: #Cambiar de HDMI a LCD
        print("")
        print(" DE HDMI A LCD")
        print("Se debe reiniciar para que los cambios surtan efectos.")
        print("")
        time.sleep(3)
        print("...abriendo carpeta LCD_show_v6_1_3...")
        os.system('cd ~')
        os.system('cd LCD_show_v6_1_3')
        time.sleep(3)
        os.system('./LCD35_v')
        print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 7: #Instalar TouchUI (Automatico)
        print("")
        print(" INSTALACION DEL TOUCHUI ")
        print("Se debe continuar para que los cambios surtan efectos...")
        os.system('cd ~')
        os.system('git clone https://github.com/BillyBlaze/OctoPrint-TouchUI-autostart.git ~/TouchUI-autostart/')
        os.system('sudo ~/TouchUI-autostart/helpers/install')
        print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 8: #Reinstalar TouchUI
        print("")
        print(" EN PROCESO DE CONSTRUCCION ")
        #print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 9: #Instalar OctoDash
        print("")
        print(" INSTALACION DE OCTODASH")
        print("Se debe continuar para que los cambios surtan efectos.")
        print("")
        os.system('cd ~')
        os.system('bash <(wget -qO- https://github.com/UnchartedBull/OctoDash/raw/master/scripts/install.sh)')
        time.sleep(3)
        print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 10: #Actualizar OctoDash
        print("")
        print(" ACTUALIAZACION DE OCTODASH")
        print("Se debe continuar para que los cambios surtan efectos.")
        print("")
        os.system('cd ~')
        os.system('wget -qO- https://github.com/UnchartedBull/OctoDash/raw/master/scripts/update.sh | bash')
        time.sleep(3)
        print("--> INSTALACION COMPLETADA <--")
        print("Pulsa ENTER para continuar...")
        input()
        menulcd()

    elif set_menu == 11: #Reiniciar
        print("REINICIANDO")
        time.sleep(5)
        os.system('sudo reboot')
    
    elif set_menu == 12: #Atras
        principal()

    elif set_menu == 0: #Salir
        return
    
    else:
        print("No has elegido ninguna opcion")
        menulcd()
        
def menudiscoduro(): #Menu Disco Duro
    os.system('clear')
    print
    print("")
    print("--------------------------------")
    print("        MENU DISCO DURO         ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Formatear Disco Duro")
    print("\t2 - Montando Disco Duro")
    print("\t3 - Atras")
    print("\t0 - Salir")
    print("")

    set_menu = int(input(menu))
    if set_menu == 1: #Fprmatear Disco Duro
        print("")
        print("FORMATEAR DISCO DURO A EXT4")
        print("...Se llamará: >> unidadusb <<")
        os.system('sudo mkfs.ext4 /dev/sda1 -L unidadusb')
        time.sleep(3)
        print("...montando Disco Duro...")
        os.system('cd /mnt')
        os.system('sudo mkdir unidadusb')
        os.system('sudo mount /dev/sda1 /mnt/unidadusb')
        print("...FORMATEO TERMINADO")
        print("Pulsa ENTER para continuar...")
        input()
        time.sleep(5)
        menudiscoduro()

    elif set_menu ==2: #Montar Disco Duro
        print("")
        print("MONTANDO DISCO DURO")
        print("...montando Disco Duro...")
        os.system('cd /mnt')
        os.system('sudo mkdir unidadusb')
        os.system('sudo mount /dev/sda1 /mnt/unidadusb')
        print("...MONTADO TERMINADO")
        print("Pulsa ENTER para continuar...")
        input()
        time.sleep(5)
        menudiscoduro()

    elif set_menu == 3: #Atras
        principal()
    
    elif set_menu == 0: #Salir
        return

    else:
        print("no has elegido ninguna opcion")
        principal()

def menuplex():
    os.system('clear')
    print
    print("")
    print("--------------------------------")
    print("           MENU PLEX            ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Instalar Plex")
    print("\t2 - Atras")
    print("\t0 - Salir")
    print("")

    set_menu = int(input(menu))
    if set_menu == 1: #Instalar Plex
        print("")
        print ("INSTALACION PLEX")
        time.sleep(2)
        print("...Añadimos el repositorio...")
        os.system('echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list')
        time.sleep(1)
        print("...Añadiendo firmas del repositorio")
        os.system('curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add')
        time.sleep(3)
        print("...Actualizando...")
        os.system('sudo apt-get update -y')
        time.sleep(2)
        os.system('sudo apt-get dist-upgrade')
        time.sleep(2)
        print("...Instalando Plex...")
        os.system('sudo apt-get install plexmediaserver -n') #-n puesto provisional
        time.sleep(2)
        print("INSTALACION COMPLETADA")
        print("Pulsa ENTER para continuar...")
        input()
        time.sleep(5)
        menuplex()

    elif set_menu == 2: #Atras
        principal()
    
    elif set_menu == 0: #Salir
        return

    else:
        print("no has elegido ninguna opcion")
        menuplex()

def menutautulli(): #Menu Tautulli
    os.system('clear')
    print
    print("")
    print("--------------------------------")
    print("         MENU TAUTULLI          ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Instalar Tautulli")
    print("\t2 - Atras")
    print("\t0 - Salir")
    print("")

    set_menu = int(input(menu))
    if set_menu == 1: #Instalar Tautulli
        print("")
        print("INSTALACION TAUTULLI")
        time.sleep(3)
        print("...Instalando prerequisitos...")
        os.system('sudo apt-get install git python3.7 python3-setuptools')
        time.sleep(1)
        os.system('cd /opt')
        print("...clonamos el repositorio...")
        os.system('sudo git clone https://github.com/Tautulli/Tautulli.git')
        time.sleep(1)
        print("...creamos el usuario Tautulli e iniciamos la instalacion...")
        os.system('sudo addgroup tautulli && sudo adduser --system --no-create-home tautulli --ingroup tautulli')
        time.sleep(1)
        os.system('sudo chown -R tautulli:tautulli /opt/Tautulli')
        time.sleep(1)
        os.system('sudo cp /opt/Tautulli/init-scripts/init.systemd /lib/systemd/system/tautulli.service')
        time.sleep(1)
        os.system('sudo systemctl daemon-reload && sudo systemctl enable tautulli.service')
        time.sleep(1)
        print("...iniciamos el servicio")
        os.system('sudo systemctl start tautulli.service')
        time.sleep(1)
        print("Entramos en la web:", "http://", ip,":8181")
        time.sleep(5)
        print("...Pusla ENTER para volver al Menu...")
        input()
        menutautulli()

    elif set_menu == 2: #Atras
        principal()
    
    elif set_menu == 0: #Salir
        return

    else:
        print("no has elegido ninguna opcion")
        menutautulli() 
       
def menutransmission(): #Menu Transmission
    os.system('clear')
    print
    print("")
    print("--------------------------------")
    print("       MENU TRANSMISSION        ")
    print("--------------------------------")
    print("")
    print("     Selecciona una opcion:")
    print("\t1 - Instalar Transmission")
    print("\t2 - Atras")
    print("\t0 - Salir")
    print("")

    set_menu = int(input(menu))
    if set_menu == 1: #Instalar Transmission
        print("")
        print("INSTALACION TRANSMISSION")
        time.sleep(3)
        print("...Bajando archivos necesario e instalando...")
        os.system('sudo apt-get install transmission-daemon')
        time.sleep(1)
        print("Configuramos Transmission")
        os.system('sudo service transmission-daemon stop')
        os.system('cd /etc')
        os.system('cd transmission-daemon')
        print("  VAMOS A CONFIGURAR EL ARCHIVO SETTING.JSON ")
        time.sleep(1)
        print(" Este proceso se tiene que hacer manual, asi que se explica todo con el mayor detalle posible")
        time.sleep(1)
        print(" Se cambiaran algunas lineas:   ")
        time.sleep(1)
        print("...Emepezamos...")
        time.sleep(1)
        print(" 1.-Indicar la carpeta que esta puesta en RED para las descargas de archivos. Para esto vamos a cambiar la siguiente linea:  ")
        time.sleep(1)
        print('	- "download-dir": "/mnt/usb/descargas" (¡¡¡OJO!!! CON LOS SIGNOS DE PUNTUACION!!) ')
        time.sleep(3)
        print(" 2.- Buscamos otra linea y cambiamos:  ")
        time.sleep(1)
        print('     - "incomplete-dir-enabled": false," y lo cambiamos por ""incomplete-dir-enabled": false, ')
        time.sleep(3)
        print(" 3.- Lo siguiente sería ponerle contraseña, para acceder a Transmission.")
        time.sleep(1)
        print("     Buscamos la siguiente linea y le añadimos la contraseña")
        time.sleep(1)
        print('     - "rpc-password":   y la cambiamos de la siguiente forma "rpc-password": "MiContraseña", ')
        time.sleep(3)
        print(" 4.- Un poco mas abajo nos pregunta por el nombre de usuario, nos sugiere uno... lo cambiamos a nuestro gusto")
        time.sleep(1)
        print('     "rpc-username": "ironman", ')
        time.sleep(3)
        print(" 5.- Ahora vamos a modificar el puerto, sería conveniente modificar el mismo puerto en el router, para tenerlo abierto")
        time.sleep(1)
        print('     - "peer-port": 51413,  y modificamos el puerto al que mas nos interese.')
        time.sleep(3)
        print(" 6.- Ahora debemos editar una línea más. Transmission por defecto bloquea todas las conexiones de cualquier ordenador que quiera conectarse con su interfaz, salvo que estén en una «lista blanca». A nosotros nos interesa poder acceder desde diferentes IP’s, así que vamos a anular esta configuración. Para ello vamos a buscar esta línea")
        print('     - "rpc-whitelist-enabled": true, Y la vamos a cambiar por esta otra: "rpc-whitelist-enabled": false, ')
        time.sleep(3)
        print("")
        time.sleep(1)
        print("Habríamos terminado ya la instalacion de Transmission, solo nos toca guardar el archivo modificado y encender Transmmision")
        time.sleep(1)
        print("Vamos a modificar el archivo")
        time.sleep(1)
        print(" Espero que hayan apuntado todo, sino... te toca leer este tocho otra vez")
        time.sleep(1)
        print("Pulsa ENTER para continuar...")
        input()
        print("")
        time.sleep(1)
        print("...Abrimos el archivo para modificarlo...")
        os.system('sudo nano settings.json')
        print("YA LO HEMOS MODIFICADO!!")
        time.sleep(1)
        print("Ahora vamos a encender Transmission")
        os.system('sudo service transmission-daemon start')
        print("")
        time.sleep(1)
        print("LISTO!!!, ya puedes utilizarlo entrando en el navegador en:")
        time.sleep(1)
        print("La direccion es: ","http://", ip,":9091")
        time.sleep(5)
        print("...Pusla ENTER para volver al Menu...")
        input()
        menutransmission()

    elif set_menu == 2: #Atras
        principal()
    
    elif set_menu == 0: #Salir
        return

    else:
        print("no has elegido ninguna opcion")
        menutransmission() 

def actualizacion(): #Menu Actualizacion
    print("ACTUALIZANDO PAQUETES DEL SISTEMA")
    print("...vamos a ello...")
    os.system('sudo apt-get update && sudo apt-get upgrade -y')
    print("...actualizacion terminada...")
    print("Pulsa ENTER para continuar...")
    input()
    time.sleep(5)
    principal()

def reinicio(): #Menu Reinicio
    print("REINICIANDO SISTEMA")
    print("En ... 3 ...")
    time.sleep(0.5)
    print("   ... 2 ...")
    time.sleep(0.5)
    print("   ... 1 ...")
    print(" >>> REINICIANDO <<<")
    time.sleep(2)
    os.system('sudo reboot')
       
principal()